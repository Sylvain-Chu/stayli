import { Injectable } from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';
import { Invoice, Prisma } from '@prisma/client';

@Injectable()
export class InvoicesService {
  constructor(private prisma: PrismaService) {}

  async findAll(
    page: number = 1,
    pageSize: number = 15,
    searchQuery?: string,
    statusFilter?: string,
  ): Promise<{ invoices: Invoice[]; total: number }> {
    const where: Prisma.InvoiceWhereInput = {};

    // Search filter
    if (searchQuery) {
      where.OR = [
        { invoiceNumber: { contains: searchQuery, mode: Prisma.QueryMode.insensitive } },
        {
          booking: {
            client: {
              OR: [
                { firstName: { contains: searchQuery, mode: Prisma.QueryMode.insensitive } },
                { lastName: { contains: searchQuery, mode: Prisma.QueryMode.insensitive } },
                { email: { contains: searchQuery, mode: Prisma.QueryMode.insensitive } },
              ],
            },
          },
        },
      ];
    }

    // Status filter
    if (statusFilter && statusFilter !== '') {
      where.status = statusFilter as 'draft' | 'sent' | 'paid' | 'overdue' | 'cancelled';
    }

    const [invoices, total] = await Promise.all([
      this.prisma.invoice.findMany({
        where,
        include: { booking: { include: { client: true, property: true } } },
        orderBy: { createdAt: 'desc' },
        skip: (page - 1) * pageSize,
        take: pageSize,
      }),
      this.prisma.invoice.count({ where }),
    ]);

    return { invoices, total };
  }

  async create(data: { dueDate: Date; amount: number; bookingId: string }): Promise<Invoice> {
    // invoiceNumber is generated by DB default; connect booking via relation field
    return this.prisma.invoice.create({
      data: {
        dueDate: data.dueDate,
        amount: data.amount,
        booking: { connect: { id: data.bookingId } },
      },
    });
  }

  // List bookings that do not yet have an invoice (for the create form)
  async findEligibleBookings() {
    return this.prisma.booking.findMany({
      where: { invoice: null },
      include: { property: true, client: true },
    });
  }

  async delete(id: string): Promise<Invoice> {
    return this.prisma.invoice.delete({ where: { id } });
  }

  async findOne(id: string): Promise<Invoice | null> {
    return this.prisma.invoice.findUnique({ where: { id }, include: { booking: true } });
  }

  async update(
    id: string,
    data: {
      invoiceNumber?: string;
      dueDate?: Date;
      amount?: number;
      status?: string;
      bookingId?: string;
    },
  ): Promise<Invoice> {
    const { bookingId, ...rest } = data;
    const updateData: { [key: string]: unknown } = { ...rest };
    if (bookingId) {
      updateData.booking = { connect: { id: bookingId } };
      // Avoid passing scalar bookingId when using relation connect
      delete updateData.bookingId;
    }
    return this.prisma.invoice.update({ where: { id }, data: updateData });
  }
}
