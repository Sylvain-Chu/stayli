{{> header }}
{{> sidebar }}

<h1>{{t 'bookings.calendarTitle'}}</h1>
<p><a href='/bookings'>{{t 'bookings.backToList'}}</a></p>

<section id='controls' style='margin: 1rem 0;'>
  <div id='status-filters' class='segmented' aria-label='{{t "bookings.filterByStatus"}}' style='display:flex; gap:.5rem; align-items:center; flex-wrap:wrap;'>
    <span style='font-weight:600; margin-right:.5rem;'>{{t 'bookings.filterByStatus'}}</span>
    <button type='button' class='seg-btn is-active' data-status='confirmed' aria-pressed='true'>
      <span class='legend-swatch' title='{{t "bookings.statusConfirmedTooltip"}}' style='background:#16a34a; border:1px solid #15803d;'></span>
      <span class='seg-label'>{{t 'bookings.statusConfirmed'}}</span>
    </button>
    <button type='button' class='seg-btn is-active' data-status='pending' aria-pressed='true'>
      <span class='legend-swatch' title='{{t "bookings.statusPendingTooltip"}}' style='background:#f59e0b; border:1px solid #d97706;'></span>
      <span class='seg-label'>{{t 'bookings.statusPending'}}</span>
    </button>
    <button type='button' class='seg-btn is-active' data-status='cancelled' aria-pressed='true'>
      <span class='legend-swatch' title='{{t "bookings.statusCancelledTooltip"}}' style='background:#dc2626; border:1px solid #b91c1c;'></span>
      <span class='seg-label'>{{t 'bookings.statusCancelled'}}</span>
    </button>
    <button type='button' class='seg-btn is-active' data-status='blocked' aria-pressed='true'>
      <span class='legend-swatch' title='{{t "bookings.statusBlockedTooltip"}}' style='background:#6b7280; border:1px solid #4b5563;'></span>
      <span class='seg-label'>{{t 'bookings.statusBlocked'}}</span>
    </button>
  </div>
  <small style='display:block; margin-top:.5rem; color:#6b7280;'>{{t 'bookings.filterNote'}}</small>
</section>

<div id='calendar'></div>
<link
  href='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.css'
  rel='stylesheet'
/>
<script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.js'></script>
<script>
  (function () {
    const calendarEl = document.getElementById('calendar');
    const filtersEl = document.getElementById('status-filters');
    if (!calendarEl) return;

    function selectedStatuses() {
      if (!filtersEl) return [];
      const boxes = Array.from(filtersEl.querySelectorAll('input[name="status"]'));
      return boxes.filter((b) => b.checked).map((b) => b.value);
    }

    const calendar = new FullCalendar.Calendar(calendarEl, {
      initialView: 'dayGridMonth',
      height: 'auto',
      headerToolbar: {
        left: 'prev,next today',
        center: 'title',
        right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek',
      },
      navLinks: true,
      nowIndicator: true,
      selectable: true,
      selectMirror: true,
      selectAllow: function(selectInfo) { return true; },
      // Render event content with small icons for quick scanning
      eventContent: function(arg) {
        const status = arg.event.extendedProps.status || '';
        // small emoji icons: user and home
        const icon = "\u{1F464}"; // üë§
        const home = "\u{1F3E0}"; // üè†
        const title = document.createElement('div');
        title.className = 'fc-event-custom';
        title.innerHTML = `<span class="fc-evt-icons">${icon} ${home}</span> <span class="fc-evt-title">${arg.event.title}</span>`;
        return { domNodes: [title] };
      },
      events: async function (info, successCb, failureCb) {
        const statuses = selectedStatuses();
        // If no statuses selected, show nothing
        if (statuses.length === 0) {
          successCb([]);
          return;
        }
        const params = new URLSearchParams();
        params.set('start', info.startStr);
        params.set('end', info.endStr);
        statuses.forEach((s) => params.append('status', s));
        try {
          const res = await fetch(`/bookings/events?${params.toString()}`);
          if (!res.ok) throw new Error('Network');
          const events = await res.json();
          successCb(events);
        } catch (e) {
          alert('Failed to load bookings.');
          if (typeof failureCb === 'function') failureCb(e);
        }
      },
      eventClick: function (info) {
        // Open a small popover/modal with booking summary and quick actions
        info.jsEvent.preventDefault();
        const props = info.event.extendedProps || {};
        const start = info.event.startStr;
        const end = info.event.endStr;
        // create simple popover
        let pop = document.getElementById('fc-popover');
        if (pop) pop.remove();
        pop = document.createElement('div');
        pop.id = 'fc-popover';
        pop.className = 'fc-popover';
        pop.innerHTML = `
          <div class="fc-popover-inner">
            <div class="fc-popover-row"><strong>${info.event.title}</strong></div>
            <div class="fc-popover-row">${start} ‚Üí ${end}</div>
            <div class="fc-popover-row">Status: ${props.status || ''}</div>
            <div class="fc-popover-actions">
              <a class="btn btn-ghost" href="${info.event.url}">Voir D√©tails</a>
              <a class="btn btn-primary" href="/bookings/${info.event.id}/edit">Modifier</a>
            </div>
            <button class='fc-popover-close' aria-label='Close'>√ó</button>
          </div>`;
        document.body.appendChild(pop);
        const rect = info.jsEvent.target.getBoundingClientRect();
        pop.style.left = Math.min(window.innerWidth - 300, rect.left) + 'px';
        pop.style.top = rect.top + window.scrollY + 24 + 'px';
        document.querySelectorAll('.fc-popover-close').forEach(b => b.addEventListener('click', () => pop.remove()));
      },
      select: function(selectionInfo) {
        // Open small modal to create booking with dates prefilled (link to create page)
        const start = selectionInfo.startStr;
        const end = selectionInfo.endStr;
        let modal = document.getElementById('fc-create-modal');
        if (modal) modal.remove();
        modal = document.createElement('div');
        modal.id = 'fc-create-modal';
        modal.className = 'fc-modal';
        modal.innerHTML = `
          <div class="fc-modal-inner">
            <h3>{{t 'bookings.createQuick'}}</h3>
            <p>${start} ‚Üí ${end}</p>
            <div class="fc-modal-actions">
              <a class="btn btn-primary" href="/bookings/create?start=${encodeURIComponent(start)}&end=${encodeURIComponent(end)}">{{t 'bookings.createBooking'}}</a>
              <button class="btn btn-ghost fc-modal-cancel">{{t 'common.cancel'}}</button>
            </div>
          </div>`;
        document.body.appendChild(modal);
        document.querySelector('.fc-modal-cancel').addEventListener('click', () => modal.remove());
        calendar.unselect();
      },
    });
    calendar.render();
    // Segmented control behavior
    if (filtersEl) {
      filtersEl.addEventListener('click', function (e) {
        const btn = e.target.closest('.seg-btn');
        if (!btn) return;
        btn.classList.toggle('is-active');
        const pressed = btn.classList.contains('is-active');
        btn.setAttribute('aria-pressed', pressed ? 'true' : 'false');
        // refetch events
        calendar.refetchEvents();
      });
    }

    function selectedStatuses() {
      if (!filtersEl) return [];
      const active = Array.from(filtersEl.querySelectorAll('.seg-btn.is-active'));
      return active.map((b) => b.getAttribute('data-status'));
    }
  })();
</script>

<style>
/* Segmented control */
.segmented { align-items: center; }
.seg-btn { display:inline-flex; align-items:center; gap:.5rem; padding:.35rem .6rem; border-radius:6px; border:1px solid rgba(15,23,42,0.05); background:transparent; cursor:pointer; }
.seg-btn .legend-swatch { width:12px; height:12px; display:inline-block; border-radius:2px; }
.seg-btn.is-active { background: rgba(37,129,247,0.08); border-color: rgba(37,129,247,0.12); }
.seg-label { font-size:13px; }

/* FullCalendar event custom */
.fc-event-custom { display:flex; align-items:center; gap:6px; }
.fc-evt-icons { opacity:.95; }

/* Popover/modal */
.fc-popover { position:absolute; z-index:1200; width:300px; background:#fff; border:1px solid var(--border-light); box-shadow:var(--shadow-card); border-radius:8px; }
.fc-popover-inner { padding:12px; }
.fc-popover-row { margin-bottom:6px; color:var(--text-dark); }
.fc-popover-actions { display:flex; gap:8px; margin-top:8px; }
.fc-popover-close { position:absolute; right:8px; top:6px; background:transparent; border:none; font-size:18px; cursor:pointer; }

.fc-modal { position:fixed; inset:0; display:flex; align-items:center; justify-content:center; background:rgba(0,0,0,0.35); z-index:1200; }
.fc-modal-inner { background:#fff; padding:18px; border-radius:8px; width:360px; max-width:90%; }
.fc-modal-actions { display:flex; gap:8px; margin-top:12px; justify-content:flex-end; }
</style>

{{> footer }}